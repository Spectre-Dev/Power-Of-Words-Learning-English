package com.example.ianc.powerofwords;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;/** * Created by Ian C on 16/03/2015. */public class DatabaseHandler extends SQLiteOpenHelper {    //declare and create variable for database version    private static final int DATABASE_VERSION = 2;    //declare and create variable for database name    private static final String DATABASE_NAME = "Power of Words.db";    //declare and create variable for the users table in the database    private static final String TABLE_USERS = "Users";    //declare and create the variables for the columns in the users table    private static final String COLUMN_ID = "ID", COLUMN_USERNAME = "Username", COLUMN_PASSWORD = "Password";    //COLUMN_IMAGEURI = "Image URI";    //constructor    public DatabaseHandler(Context context){        super(context, DATABASE_NAME, null,DATABASE_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db){        String query = "CREATE TABLE " + TABLE_USERS +                "(" + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +                COLUMN_USERNAME + " TEXT," +                COLUMN_PASSWORD + " TEXT)";        db.execSQL(query);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion){        db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS);        onCreate(db);    }    //CRUD operations    public void createUser(User user){        SQLiteDatabase db = getWritableDatabase();        ContentValues values  = new ContentValues();        values.put(COLUMN_USERNAME, user.getUsername());        values.put(COLUMN_PASSWORD, user.getPassword());        //values.put(COLUMN_IMAGEURI, user.getImageUri().toString());        db.insert(TABLE_USERS, null, values);        db.close();    }    public String readUser(String username){        SQLiteDatabase db = getReadableDatabase();        Cursor cursor = db.query(TABLE_USERS, null, COLUMN_USERNAME+"=?", new String[]{username}, null, null, null);        if(cursor.getCount() < 1){            cursor.moveToFirst();            db.close();            cursor.close();            return "User Does Not Exist";        }else{            cursor.moveToFirst();            String password= cursor.getString(cursor.getColumnIndex(COLUMN_PASSWORD));            db.close();            cursor.close();            return password;        }    }    public void updateUser(User user){        SQLiteDatabase db = getWritableDatabase();        ContentValues values  = new ContentValues();        values.put(COLUMN_USERNAME, user.getUsername());        values.put(COLUMN_PASSWORD, user.getPassword());        //values.put(COLUMN_IMAGEURI, user.getImageUri().toString());        db.update(TABLE_USERS, values, COLUMN_USERNAME+"=?", new String[]{user.getUsername()});        db.close();    }    public void deleteUser(String username){        SQLiteDatabase db = getWritableDatabase();        db.execSQL("DELETE FROM " + TABLE_USERS + " WHERE " + COLUMN_USERNAME + "=\"" + username + "\";");        db.close();    }    public int countUsers(){        SQLiteDatabase db = getReadableDatabase();        Cursor cursor = db.rawQuery("SELECT * FROM "+TABLE_USERS, null);        int counter = cursor.getCount();        db.close();        cursor.close();        return counter;    }}